user www-data;
worker_processes 4;
pid /var/run/nginx.pid;

events {
    worker_connections 768;
    # multi_accept on;
#    debug_connection 93.97.184.95;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    server_tokens off;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;

    keepalive_timeout  20;

    gzip                on;
    gzip_http_version   1.0;
    gzip_comp_level     5;
    gzip_min_length     256;
    gzip_disable        msie6;
    gzip_proxied        any;
    gzip_vary           on;
    gzip_types
        application/atom+xml
        application/javascript
        application/x-javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;


    # Static server
    server {
        listen       443;
        server_name  static.jsbin.com;
        root         /Users/remy/Sites/jsbin/public/;
        index        index.html;

        return 301 http://drt35l4oshkgr.cloudfront.net/$request_uri;

  add_header X-route static-ssl;

        ssl                  on;
        ssl_certificate      /Users/remy/certs/server.crt;
        ssl_certificate_key  /Users/remy/certs/server.key;

        ssl_session_timeout  5m;

        ssl_protocols               SSLv2 SSLv3 TLSv1;
        ssl_ciphers                 HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers   on;

        error_page 502  /Users/remy/Sites/jsbin/views/502.html;
        error_page 504  /Users/remy/Sites/jsbin/views/504.html;

        # Expire rules for static content

        # Runner
        location ~* /runner {
            expires -1;
            add_header X-Test no-cache;
        }

        # cache.appcache, your document html and data
        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
            expires -1;
        }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
            expires 1M;
            access_log off;
            add_header Cache-Control "public";
        }

        # CSS and Javascript
        location ~* \.(?:css|js)$ {
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        # WebFonts
        location ~* \.(?:ttf|ttc|otf|eot|woff|font.css)$ {
            expires 1M;
            access_log off;
            add_header Cache-Control "public";
        }

        location / {
            try_files   $uri $uri/ =404;
            add_header  Pragma "public";
            add_header  Cache-Control "public, must-revalidate, proxy-revalidate";
            add_header  Last-Modified $sent_http_Expires;
            add_header  Access-Control-Allow-Origin *;
        }
    }

    server {
        listen 443 default_server;
        server_name _;
        access_log   /var/log/nginx/ssl.jsbin.com.log;
  add_header X-route node-ssl;

        ssl                  on;
        ssl_certificate      /Users/remy/certs/server.crt;
        ssl_certificate_key  /Users/remy/certs/server.key;

        ssl_session_timeout  5m;

        ssl_protocols               SSLv2 SSLv3 TLSv1;
        ssl_ciphers                 HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers   on;

  location / {
            # Pass the request on to Varnish.
            proxy_pass  http://localhost:8000;

            # Pass a bunch of headers to the downstream server, so they'll know what's going on.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Accel-Buffering no;
            proxy_set_header Connection '';

            proxy_http_version          1.1;
            proxy_buffering             off;
            proxy_cache                 off;

            # Most web apps can be configured to read this header and understand that the current session is actually HTTPS.
            proxy_set_header X-Forwarded-Proto https;

            # We expect the downsteam servers to redirect to the right hostname, so don't do any rewrites here.
            proxy_redirect     off;
        }
    }

    # static.jsbin.com : static server
    server {
        listen       80;
        server_name  static.jsbin.com origin-static.jsbin.com;
        root         /Users/remy/Sites/jsbin/public/;
        index        index.html;
        access_log   /var/log/nginx/static.jsbin.com.log;

  add_header X-route static;

        error_page 502  /Users/remy/Sites/jsbin/views/502.html;
        error_page 504  /Users/remy/Sites/jsbin/views/504.html;

        # Expire rules for static content
#
# Wide-open CORS config for nginx
#
location / {

     if ($request_method = 'OPTIONS') {

        add_header 'Access-Control-Allow-Origin' '*';

        #
        # Om nom nom cookies
        #

        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

        #
        # Custom headers and headers various browsers *should* be OK with but aren't
        #

        add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

        #
        # Tell client that this pre-flight info is valid for 20 days
        #

        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;

        return 204;
     }

     if ($request_method = 'POST') {

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

     }

     if ($request_method = 'GET') {

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

     }

            try_files   $uri $uri/ =404;
            # Cache hard
            add_header  Pragma "public";
            add_header  Cache-Control "public, must-revalidate, proxy-revalidate";
            add_header  Last-Modified $sent_http_Expires;
            add_header  Access-Control-Allow-Origin $http_origin;
}

        # cache.appcache, your document html and data
        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
            add_header  Access-Control-Allow-Origin $http_origin;
            expires -1;
        }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
            expires 1M;
            access_log off;
            add_header Cache-Control "public";
        }

        # CSS and Javascript
        location ~* \.(?:css|js)$ {
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        # WebFonts
        location ~* \.(?:ttf|ttc|otf|eot|woff|font.css)$ {
            expires 1M;
            access_log off;
            add_header Cache-Control "public";
        }

        # Try to serve the files, or serve a 404
        location /ignore-me-for-now {
            try_files   $uri $uri/ =404;
            # Cache hard
            add_header  Pragma "public";
            add_header  Cache-Control "public, must-revalidate, proxy-revalidate";
            add_header  Last-Modified $sent_http_Expires;
            add_header  Access-Control-Allow-Origin $http_origin;
        }
    }

#    map $cookie_branch $branch {
#      default 8000;
#      ~^(?P<name>[\w-]+) $name;
#    }

    # jsbin.com : proxy port 80 traffic to Node
    server {
        listen      80 default_server;
        server_name _;
# jsbin.com run.jsbin.com www.jsbin.com 3.jsbin.com;
        access_log  /var/log/nginx/jsbin.log;
  add_header X-route node;

        location ~ ^/(help|blog|about) {
            access_log off;
            proxy_pass http://learn.jsbin.com;
        }

        error_page 502  /502.html;
        error_page 504  /504.html;

        location = /504.html {
          root  /Users/remy/Sites/jsbin/views/;
        }

        location = /502.html {
          root  /Users/remy/Sites/jsbin/views/;
        }


        location / {
            # Pass the request on to Node.
            proxy_pass  http://localhost:8000;
#            resolver 127.0.0.1;

            # Pass the request on to Node.
#            proxy_pass  http://127.0.0.1:$branch;

            # Pass a bunch of headers to the downstream server, so they'll know what's going on.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Referer $http_referer;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Accel-Buffering no;
            proxy_set_header Connection '';

            proxy_http_version          1.1;
            proxy_buffering             off;
            proxy_cache                 off;
            proxy_redirect     off;
        }
    }
}
